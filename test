local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()



local ply = game:GetService("Players").LocalPlayer 

local Character = ply.Character or ply.CharacterAdded:Wait()
local rootpart : BasePart = Character:FindFirstChild("HumanoidRootPart")



local Window = Fluent:CreateWindow({
	Title = "Fluent " .. Fluent.Version,
	SubTitle = "by dawid",
	TabWidth = 160,
	Size = UDim2.fromOffset(580, 460),
	Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
	Theme = "Dark",
	MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
	Main = Window:AddTab({ Title = "ตกปลา", Icon = "" }),
	Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local gg1 = false
local Options = Fluent.Options


local tween = game:GetService("TweenService")
local GuiService = game:GetService('GuiService')

local function color(color1)
	local Highlight = Instance.new("Highlight",Character)
	Highlight.OutlineTransparency = 1
	Highlight.FillTransparency = 0
	Highlight.FillColor = color1

	tween:Create(Highlight,TweenInfo.new(1),{
		FillTransparency = 1
	}):Play()

	task.delay(1,function()
		Highlight:Destroy()
	end)
end



do
	Fluent:Notify({
		Title = "Notification",
		Content = "This is a notification",
		SubContent = "SubContent", -- Optional
		Duration = 5 -- Set to nil to make the notification not disappear
	})



	Tabs.Main:AddButton({
		Title = "ขายปลา",
		Description = "Very important button",
		Callback = function()
			Window:Dialog({
				Title = "ขายปลา",
				Content = "ขายปลาหมดเลยไหม",
				Buttons = {
					{
						Title = "ยืนยัน",
						Callback = function()
							
							task.spawn(function()
								local save = rootpart.CFrame

								local cam = workspace.Camera


								for i,v in next, ply.Backpack:GetChildren() do
									if string.find(v.Name, "Rod") then
										Character.Humanoid:UnequipTool(v)
									end
								end

								local test = false
								task.delay(5,function()
									test = true
								end)
								local rootpart : BasePart = Character:FindFirstChild("HumanoidRootPart")

								Character:FindFirstChildOfClass("Humanoid").Jump = true

								local kfc = false


								rootpart.Anchored = false
								while not test  do
									local humanoid = Character:FindFirstChildOfClass("Humanoid")

									if humanoid then
										humanoid:UnequipTools()
									end



									if game.Workspace:FindFirstChild("world"):FindFirstChild("npcs"):FindFirstChild("Marc Merchant"):FindFirstChild("Highlight") then
										kfc = true
									end

									if ply.PlayerGui:FindFirstChild("options") then
										break
									end


									if  game.Workspace:FindFirstChild("world"):FindFirstChild("npcs"):FindFirstChild("Marc Merchant") then

										Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(464.660919, 150.62973, 230.900864, 0.993709922, 1.74805646e-08, -0.111984678, -1.0902955e-08, 1, 5.93490945e-08, 0.111984678, -5.77548214e-08, 0.993709922)
										cam.CFrame = CFrame.lookAt(Character:FindFirstChild("HumanoidRootPart").Position, game.Workspace:FindFirstChild("world"):FindFirstChild("npcs"):FindFirstChild("Marc Merchant"):FindFirstChild("HumanoidRootPart").Position)



										if kfc then
											kfc = false
											task.spawn(function()
												local _B : ProximityPrompt =  game.Workspace:FindFirstChild("world"):FindFirstChild("npcs"):FindFirstChild("Marc Merchant"):FindFirstChild("dialogprompt")

												if _B then
													_B:InputHoldBegin()
													task.wait()
													_B:InputHoldEnd()
												end
											end)


										end

									else

										Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(464.660919, 150.62973, 230.900864, 0.993709922, 1.74805646e-08, -0.111984678, -1.0902955e-08, 1, 5.93490945e-08, 0.111984678, -5.77548214e-08, 0.993709922)

									end
									task.wait()
								end


								repeat
									task.wait()
								until ply.PlayerGui:FindFirstChild("options")


								while true do
									local toolCount = 0

									if not ply.PlayerGui:FindFirstChild("options") then
										break
									end


									local button: ImageButton = ply.PlayerGui:WaitForChild("options", math.huge):FindFirstChild("safezone"):FindFirstChild("2option"):FindFirstChild("button")

									local VirtualInputManager = game:GetService('VirtualInputManager')
									GuiService.SelectedObject = button
									GuiService.SelectedObject = button
									VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
									VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
									task.wait(.1)
									GuiService.SelectedObject = nil

									task.wait()
								end

								wait(1)


								color(Color3.new(1, 0.917647, 0))


								for i = 0,5 do
									rootpart.CFrame = save
									task.wait(.001)
								end

							end)
						end
					},
					{
						Title = "ออก",
						Callback = function()
							print("Cancelled the dialog.")
						end
					}
				}
			})
		end
	})



	local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Toggle", Default = false })

	Toggle:OnChanged(function()
		if Options.MyToggle.Value then
			gg1 = true
			for i = 0,math.huge do
				if not gg1 then
					return
				end
				rootpart.Anchored = false


				for i,v in next, ply.Backpack:GetChildren() do
					if string.find(v.Name, "Rod") then
						Character.Humanoid:EquipTool(v)
					end
				end

				color(Color3.new(1, 1, 1))


				local VirtualInputManager = game:GetService('VirtualInputManager')

				for i = 0,math.huge do
					if not gg1 then
						return
					end

					if not ply.PlayerGui:FindFirstChild("shakeui") then


						repeat
							task.wait()
						until Character:FindFirstChildOfClass("Tool"):FindFirstChild("values"):FindFirstChild("lure").Value == 0


						if Character:FindFirstChildOfClass("Tool") then
							Character:FindFirstChildOfClass("Tool").events.cast:FireServer(100, 1)



						else
							for i,v in next, ply.Backpack:GetChildren() do
								if string.find(v.Name, "Rod") then
									Character.Humanoid:EquipTool(v)
								end
							end
						end
					end


					if Character:FindFirstChildOfClass("Tool"):FindFirstChild("values"):FindFirstChild("casted").Value then
						break
					end

					task.wait()
				end


				repeat
					task.wait()
				until Character:FindFirstChildOfClass("Tool"):FindFirstChild("values"):FindFirstChild("casted").Value == true


				color(Color3.new(1, 0.509804, 0.0196078))

				local gui = ply.PlayerGui:WaitForChild("shakeui",math.huge)


				for i = 0,math.huge do
					if not gg1 then
						return
					end
					if Character:FindFirstChildOfClass("Tool"):FindFirstChild("values"):FindFirstChild("bite").Value then
						break
					end


					local button : ImageButton = gui:FindFirstChild("safezone"):FindFirstChild("button")

					rootpart.Anchored = true

					if  gui then
						GuiService.SelectedObject = button
						GuiService.SelectedObject = button
						VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
						VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
						task.wait(.001)
						GuiService.SelectedObject = nil
					else
						break
					end

				end

				repeat
					task.wait()
				until Character:FindFirstChildOfClass("Tool"):FindFirstChild("values"):FindFirstChild("bite").Value == true

				color(Color3.new(1, 0, 0))

				for i = 0,math.huge do
					if not gg1 then
						return
					end

					game.ReplicatedStorage:WaitForChild("events"):WaitForChild("reelfinished"):FireServer(100, true)


					if Character:FindFirstChildOfClass("Tool"):FindFirstChild("values"):FindFirstChild("lure").Value == 0 then
						break
					end

					task.wait()
				end


				task.wait()
			end

			rootpart.Anchored = false
		end
		if not Options.MyToggle.Value  then
			rootpart.Anchored = false
			gg1 = false
		end
		
		
		
	end)

	Options.MyToggle:SetValue(false)



end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
	Title = "Fluent",
	Content = "The script has been loaded.",
	Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
